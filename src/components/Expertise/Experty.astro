---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

const expertiseCollection = await getCollection("expertise");

const expertiseIDs = expertiseCollection.map((item) => item.slug);

type Props = {
  experty: CollectionEntry<"expertise">;
};

const { experty } = Astro.props;
const { Content } = await experty.render();
---

<div>
  <dialog id={`dialog-${experty.slug}`} class="expertise-dialog">
    <h2>{experty.data.title}</h2>
    <div class="content">
      <Content />
    </div>
    <button id={`close-${experty.slug}`}> Close </button>
  </dialog>
  <button class="expertise-item" id={`open-${experty.slug}`}
    >{experty.data.title}</button
  >
</div>

<script define:vars={{ expertiseIDs }}>
  const expertise = expertiseIDs.map((id) => {
    return {
      dialog: document.getElementById(`dialog-${id}`),
      close: document.getElementById(`close-${id}`),
      open: document.getElementById(`open-${id}`),
    };
  });

  expertise.forEach((experty) => {
    experty.open?.addEventListener("click", () => {
      experty.dialog?.showModal();
    });
    experty.close?.addEventListener("click", () => {
      experty.dialog?.close();
    });
  });
</script>

<style>
  .expertise-item {
    padding-block: 0.25rem;
    padding-inline: 0.25rem;
    background: transparent;
    border: 1px solid var(--outline);
    border-radius: 0.5rem;
    color: var(--on-surface);
    font-weight: 600;
    font-size: var(--fs-sm);
    cursor: pointer;
    min-width: min-content;
  }

  .expertise-item:hover {
    background-color: var(--tertiary-container);
    color: var(--on-tertiary-container);
  }

  @media (min-width: 450px) {
    .expertise-item {
      padding-block: 0.5rem;
      padding-inline: 0.5rem;
    }
  }

  .expertise-dialog[open] {
    display: grid;
    grid-template-rows: 4rem 1fr 6rem;
    background: var(--surface);
    color: var(--on-surface);
    /* safari */
    max-inline-size: min(90vw, 60ch);
    max-block-size: min(50vh, 100%);
    max-block-size: min(50dvb, 100%);
    margin: auto;
    padding: 0;
    inset: 0;
    border-radius: 0.5rem;
    max-height: 65ch;
    overflow: hidden;
  }

  .expertise-dialog > h2 {
    text-align: center;
    font-weight: 600;
    font-size: var(--fs-md);
    color: var(--on-primary-container);
    padding-block: 2rem;
    padding-inline: 1rem;
    background-color: var(--primary-container);
    min-width: 100%;
    display: grid;
    place-content: center;
  }

  .expertise-dialog > .content {
    padding-block: 1.25rem;
    padding-inline: 1.25rem;
    overflow: scroll;
    display: grid;
    gap: 1rem;
    font-size: var(--fs-sm);
  }

  .expertise-dialog > button {
    font-weight: 600;
    color: var(--on-tertiary-container);
    background-color: var(--tertiary-container);
    padding-block: 0.5rem;
    padding-inline: 1rem;
    font-size: var(--fs-sm);
    justify-self: end;
    margin-inline: 2rem;
    margin-block: 2rem;
    border: 1px solid var(--outline-variant);
    border-radius: 0.5rem;
    display: grid;
    place-content: center;
  }
</style>
